CREATE DATABASE  IF NOT EXISTS `dotnet_ubuntu` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `dotnet_ubuntu`;
-- MySQL dump 10.13  Distrib 8.0.25, for Win64 (x86_64)
--
-- Host: localhost    Database: dotnet_ubuntu
-- ------------------------------------------------------
-- Server version	8.0.25

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `comments` (
  `ID` bigint NOT NULL AUTO_INCREMENT,
  `PostID` bigint DEFAULT NULL,
  `CommentID` bigint DEFAULT NULL,
  `Content` mediumtext,
  `CommentDateTime` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK_POST` (`PostID`),
  CONSTRAINT `FK_POST` FOREIGN KEY (`PostID`) REFERENCES `posts` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=100 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
INSERT INTO `comments` VALUES (62,32,-1,'joljil','2022/1/28 20:27:00'),(75,24,-1,'好','2022/1/28 22:46:48'),(76,6,-1,'沙发','2022/2/8 20:51:00'),(77,6,-1,'写的不错?','2022/2/8 20:53:56'),(78,6,76,'你可真行','2022/2/8 20:54:06'),(79,6,77,'00000','2022/4/3 18:41:19'),(80,6,79,'456789','2022/4/3 18:41:28'),(81,6,78,'324567890','2022/4/3 18:41:47'),(85,24,75,'777','2022/4/10 18:06:23'),(86,24,82,'999','2022/4/10 18:06:35'),(88,6,81,'牛皮','2022/4/17 14:58:27'),(89,6,78,'啦啦啦','2022/4/17 14:59:10'),(90,6,79,'抓','2022/4/17 15:00:08'),(91,6,80,'00000','2022/4/17 15:03:03'),(92,6,78,'列达普','2022/4/17 15:05:11'),(93,37,-1,'积极沙发','2022/4/17 15:05:58'),(94,37,93,'哈哈啊','2022/4/17 15:06:08'),(95,37,94,'哇','2022/4/17 15:06:29'),(96,37,95,'9888','2022/4/17 17:19:27'),(97,37,-1,'?','2022/4/23 16:28:14'),(98,34,-1,'OJBK','2022/4/25 11:21:37'),(99,34,98,'HHHH','2022/4/25 11:21:48');
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `messages`
--

DROP TABLE IF EXISTS `messages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `messages` (
  `ID` bigint NOT NULL AUTO_INCREMENT,
  `SendUserID` bigint NOT NULL,
  `ReceiveID` bigint NOT NULL,
  `IsGroup` tinyint(1) NOT NULL,
  `Time` datetime NOT NULL,
  `ContentType` varchar(255) NOT NULL,
  `Content` mediumblob NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `SendUserID` (`SendUserID`),
  KEY `ReceiveID` (`ReceiveID`),
  CONSTRAINT `messages_ibfk_1` FOREIGN KEY (`SendUserID`) REFERENCES `users` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `messages_ibfk_2` FOREIGN KEY (`ReceiveID`) REFERENCES `users` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1108 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `messages`
--

LOCK TABLES `messages` WRITE;
/*!40000 ALTER TABLE `messages` DISABLE KEYS */;
/*!40000 ALTER TABLE `messages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `posts`
--

DROP TABLE IF EXISTS `posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `posts` (
  `ID` bigint NOT NULL AUTO_INCREMENT,
  `Title` varchar(255) NOT NULL,
  `Summary` varchar(1023) NOT NULL,
  `Focus` varchar(255) NOT NULL,
  `PostDateTime` varchar(255) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `postID` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `posts`
--

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` VALUES (6,'C# 委托','委托的精髓 --- 以变量作为方法(函数)使用,类似于C中函数指针',' C# ','2019/1/1 0:00:00'),(17,'我的GitHub','我的GitHub\n\n我的GitHub\n我的GitHub\n我的GitHub\n\n我的','GitHub','2021/7/29 21:49:47'),(23,'GitHub使用','在编程届有个共识，想要成为一个合格的程序员必须要掌握 GitHub 的用法！\n\n','GitHub','2021/7/30 12:28:17'),(24,'HTML 5 全局 contenteditable 属性','定义和用法\n\ncontenteditable 属性规定是否可编辑元素的内容。\n\n','HTML','2021/7/30 13:28:21'),(29,'\"坚持就是胜利\"','\"无须担心，明天早上牛奶还会放在门前的台阶上，《新政治家报》也会照常出版。\n——G\"','\"加油,奥利给!!!\"','2021/8/19 18:09:58'),(30,'\"好久不见\"','\"（仅代表个人观点，不喜勿喷，并无嘲笑和讽刺的意味，如果有哪里语言不当，或有言论冒\"','\"甚是想念\"','2021/8/19 18:22:38'),(32,'交个朋友','Format in kotlin string templates\n\nKotli','交个朋友','2021/12/5 21:36:42'),(33,'我也想交个朋友','数据库	对应Java类（旧）	对应Java类（新）\nDATETIME	java.','交个朋友','2021/12/5 21:38:54'),(34,'加好友','加好友\n','加好友','2021/12/5 21:40:47'),(37,'基于.net Core的ORM框架与WebSocket消息框架类库','Kamanri\n\n一个个人编写并使用的基于.net Core 3.1的类库.可在nuget.org上获取同名的NuGet包.\n包括:\n\n一个轻量级对象关系映射(ORM)框架 -- Kamanri.Da','ORM, WebSocket','2022/2/9 10:09:08'),(43,'CKEditor 5','CKEditor 5\nCKEditor 5\nCKEditor 5\n\nCKEditor 5\n\nCKEditor 5\n\nCKEditor 5\n\nCKEditor 5\nCKEditor 5\n\nCKEdito','CKEditor 5','2022/4/11 12:50:37'),(44,'The three greatest things you learn from traveling','The three greatest things you learn from traveling\n\nLike all the great things on earth traveling tea','The three greatest things you learn from traveling','2022/4/13 23:10:56'),(47,'当足球成为艺术！巴萨2009-2022极致Tiki-Taka赏析！','media widget','当足球成为艺术！巴萨2009-2022极致Tiki-Taka赏析！','2022/4/19 15:12:12'),(48,'无人机扫描整座山！耗费30天，用10000张照片还原世界文化遗产','\n\n\nmedia widget','无人机扫描整座山！耗费30天，用10000张照片还原世界文化遗产','2022/4/19 15:35:41');
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `posts_tags`
--

DROP TABLE IF EXISTS `posts_tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `posts_tags` (
  `posts` bigint NOT NULL,
  `tags` bigint NOT NULL,
  `relations` varchar(255) NOT NULL,
  PRIMARY KEY (`posts`,`tags`),
  KEY `PT_FK_P` (`posts`),
  KEY `PT_FK_T` (`tags`),
  CONSTRAINT `posts_tags_ibfk_1` FOREIGN KEY (`posts`) REFERENCES `posts` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `posts_tags_ibfk_2` FOREIGN KEY (`tags`) REFERENCES `tags` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `posts_tags`
--

LOCK TABLES `posts_tags` WRITE;
/*!40000 ALTER TABLE `posts_tags` DISABLE KEYS */;
INSERT INTO `posts_tags` VALUES (6,2,'{\"Type\":[\"Owned\"]}'),(6,47,'{\"Type\":[\"Owned\"]}'),(17,2,'{\"Type\":[\"Owned\"]}'),(24,7,'{\"Type\":[\"Owned\"]}'),(29,4,'{\"Type\":[\"Owned\"]}'),(30,1,'{\"Type\":[\"Owned\"]}'),(32,2,'{\"Type\":[\"Owned\"]}'),(33,1,'{\"Type\":[\"Owned\"]}'),(33,2,'{\"Type\":[\"Owned\"]}'),(33,16,'{\"Type\":[\"Owned\"]}'),(34,1,'{\"Type\":[\"Owned\"]}'),(37,47,'{\"Type\":[\"Owned\"]}'),(37,48,'{\"Type\":[\"Owned\"]}'),(43,1,'{\"Type\":[\"Owned\"]}'),(44,4,'{\"Type\":[\"Owned\"]}'),(47,1,'{\"Type\":[\"Owned\"]}');
/*!40000 ALTER TABLE `posts_tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `postsinfo`
--

DROP TABLE IF EXISTS `postsinfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `postsinfo` (
  `ID` bigint NOT NULL,
  `Content` mediumtext NOT NULL,
  KEY `ID` (`ID`),
  CONSTRAINT `postsinfo_ibfk_1` FOREIGN KEY (`ID`) REFERENCES `posts` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `postsinfo`
--

LOCK TABLES `postsinfo` WRITE;
/*!40000 ALTER TABLE `postsinfo` DISABLE KEYS */;
INSERT INTO `postsinfo` VALUES (6,'<div id=\"context\">\n    \n      <div class=\"mume markdown-preview  margin-center col-md-8\">\n      <h4 class=\"mume-header\" id=\"%E5%A7%94%E6%89%98\">委托</h4>\n\n<p><strong>委托的精髓 --- 以变量作为方法(函数)使用,类似于C中函数指针</strong></p>\n<ul>\n<li>此处函数与方法意义相同,统称为<strong>方法</strong></li>\n<li>此处\"C\"指 <strong>C/C++语言</strong></li>\n</ul>\n\n<p>这里先定义一个命名空间,里面有两个类</p>\n<pre data-role=\"codeBlock\" data-info=\"cs\" class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n           \n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Comparor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</pre><p>现在要在<code>Program</code>类里使用<code>B</code>类里的<code>Comparor</code>方法,该怎么办呢</p>\n<ol>\n<li>可以直接引用</li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"cs\" class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n           Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">.</span><span class=\"token function\">Comparor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Comparor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</pre><ol start=\"2\">\n<li>利用委托实例化一个变量(这个变量的类型后面再说)指向这个方法,再使用这个变量</li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"cs\" class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">DelegateComparor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在类外定义委托</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">DelegateComparor</span> comparor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DelegateComparor</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">.</span>Comparor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Comparor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</pre><p>这样做的好处是可以更加灵活的使用不同类里的同一类型方法.并且有利于统一规范.避免引用不当造成的异常.(具体见后面)</p>\n<h4 class=\"mume-header\" id=\"func%E4%B8%8Eaction\">Func&lt;&gt;与Action&lt;&gt;</h4>\n\n<p>还是刚才那个类</p>\n<pre data-role=\"codeBlock\" data-info=\"cs\" class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n           \n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Comparor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</pre><p>现在回到刚才那个问题,怎样在<code>Program</code>类里使用<code>B</code>类里的<code>Comparor</code>方法,除了委托之外?<br>\n在委托部分,我们发现委托出来指向方法的变量<code>comparor</code>的类型并未直接说明,只在委托定义中</p>\n<pre data-role=\"codeBlock\" data-info=\"cs\" class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">DelegateComparor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</pre><p>才可知这是一个有两个<code>int</code>参数,返回值为<code>int</code>的方法.</p>\n<p>那么,如果能够找到像C中一样指向该类型函数的指针(如<code>int (*p)(int,int)</code>)的类型,就可以直接定义这种类型的变量来赋值了.</p>\n<p>因此,C#中提供了<code>Func&lt;&gt;</code>和<code>Action&lt;&gt;</code>来表达这一\"函数指针\"类型</p>\n<p>实例:</p>\n<blockquote>\n<p>C# == C<br>\nAction == void (*)() <em>//无参数,无返回值</em><br>\nAction&lt;T1&gt; == void (*)(T1) <em>//有一个参数,无返回值</em><br>\nAction&lt;T1,T2&gt; == void (*)(T1,T2) <em>//有两个参数,无返回值</em><br>\nFunc&lt;T&gt; == T (*)() <em>//无参数,有唯一返回值</em><br>\nFunc&lt;T1,T&gt; == T (*)(T1) <em>//有一个参数,有一个返回值</em><br>\nFunc&lt;T1,T2,T&gt; == T (*)(T1,T2) <em>//有两个参数,有一个返回值</em></p>\n</blockquote>\n<p>因此,可以这样定义:</p>\n<pre data-role=\"codeBlock\" data-info=\"cs\" class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n           <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> comparor <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>Comparor<span class=\"token punctuation\">;</span>\n           Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Comparor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</pre><p>毕.</p>\n<h4 class=\"mume-header\" id=\"%E4%BB%8E%E5%87%BD%E6%95%B0%E5%88%B0%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%86%8D%E5%88%B0lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F\">从函数到匿名函数再到lambda表达式</h4>\n\n<p>ps. 看标题就知道这是个进化的过程</p>\n<h5 class=\"mume-header\" id=\"%E5%87%BD%E6%95%B0-%E5%88%9D%E7%BA%A7%E5%BD%A2%E6%80%81\">函数---初级形态</h5>\n\n<p>仍然是刚才那个类,定义一个List序列</p>\n<pre data-role=\"codeBlock\" data-info=\"cs\" class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Comparor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</pre><p>假设现在要给这个list进行排序,该怎么规定是从大到小还是从小到大呢?</p>\n<p>这就可以通过那个<code>Comparor</code>方法来决定.</p>\n<p>输入序列中的任意要比较的两个元素<code>x</code>,<code>y</code>,如返回为负则按<code>x -&gt; y</code>排,否则按<code>y -&gt; x</code>排.(具体怎么比较由函数内部自行定义)</p>\n<p><code>List</code>类中的<code>Sort</code>方法接受一个<code>Comparison&lt;T&gt;</code>类型参数.而这个<code>Comparison&lt;T&gt;</code>,就是一个可且仅可接受<code>Func&lt;int, int, int&gt;</code>类型的委托.</p>\n<p>因此最初的写法,利用<code>Comparison&lt;T&gt;</code>委托:</p>\n<pre data-role=\"codeBlock\" data-info=\"cs\" class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Comparison<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> comparison <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Comparison<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">.</span>Comparor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>comparison<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Comparor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</pre><p>当然也可以采用直接引用法:</p>\n<pre data-role=\"codeBlock\" data-info=\"cs\" class=\"language-csharp\">list<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">.</span>Comparor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</pre><p>不过这样做的弊端也很明显: 如果这个<code>B.Comparor</code>的类型不为<code>Func&lt;int,int,int&gt;</code> 就会引发异常,也不利于规范.委托的好处就在于<strong>给指向函数的变量做出规范</strong>.</p>\n<p>最后,这里不妨简化,去掉定义的<code>Comparison&lt;T&gt;</code>委托类型变量.</p>\n<pre data-role=\"codeBlock\" data-info=\"cs\" class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Comparison<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">.</span>Comparor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Comparor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</pre><h5 class=\"mume-header\" id=\"%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0-%E4%B8%AD%E7%BA%A7%E5%BD%A2%E6%80%81\">匿名函数---中级形态</h5>\n\n<p>发现到这里<code>B</code>中的<code>Comparor</code>方法只用了一次,却需要专门定义一个新的类和方法,</p>\n<p>两个字,<strong style=\"color:red;\">繁琐!</strong></p>\n<p>于是后来可以用<code>delegate</code>关键字,<code>delegate(){}</code>来定义匿名方法,所谓匿名方法就是没名字的方法,一气呵成的定义和使用,用完即丢弃.</p>\n<p>这里用匿名函数来重写:</p>\n<pre data-role=\"codeBlock\" data-info=\"cs\" class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Comparison<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">delegate</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</pre><h5 class=\"mume-header\" id=\"lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E6%9C%80%E7%BB%88%E5%BD%A2%E6%80%81\">lambda表达式---最终形态</h5>\n\n<p>上面的匿名函数已经做出了一定程度的简化,但是木大木大木大木大还不够简单!!!</p>\n<p>有更简单的!!!</p>\n<p>有更简单的!!!</p>\n<p>有更简单的!!!</p>\n<p>重要的事情说三遍怕你听不清</p>\n<p>当委托里的变量类型明确时(比如这里<code>Conparison&lt;int&gt;</code>就规定了一定是<code>int</code>),匿名函数可以采用一种全新的书写方式:<code>()=&gt;</code>,即lambda表达式.</p>\n<p>这里用lambda表达式来重写:</p>\n<pre data-role=\"codeBlock\" data-info=\"cs\" class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ConsoleApp2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Comparison<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</pre><ul>\n<li>当只有一个参数时,<code>()</code>可省略</li>\n<li>当后面的表达式超过一句时,需用大括号括起</li>\n</ul>\n<p>最简单形式形成!</p>\n<p>最后排序结果:</p>\n<blockquote>\n<p>1<br>\n2<br>\n3</p>\n</blockquote>'),(17,'<p><a data-cke-saved-href=\"https://github.com/ryankamanri\" href=\"https://github.com/ryankamanri\">我的GitHub</a></p><hr><h2 style=\"font-style:italic\"><strong>我的GitHub</strong></h2><h3 style=\"color:#aaaaaa; font-style:italic\"><em>我的GitHub</em></h3><div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><s>我的GitHub</s></div><blockquote><p>我的GitHub</p></blockquote><p><br></p>'),(23,'<p><strong>在编程届有个共识，想要成为一个合格的程序员必须要掌握 GitHub 的用法！</strong></p><p><img data-cke-saved-src=\"https://pic2.zhimg.com/80/v2-ddef4098eac5654451aa4d9c68c656e9_720w.jpg\" src=\"https://pic2.zhimg.com/80/v2-ddef4098eac5654451aa4d9c68c656e9_720w.jpg\" width=\"1920\"></p><p>接下来，我们用两万字加一百张图片从头到尾的给你介绍 GitHub 的具体使用，通过这个 GitHub 教程，让你掌握 GitHub 的使用方法。</p><p><a data-cke-saved-href=\"https://zhuanlan.zhihu.com/p/369486197\" data-cke-pa-onclick=\"window.open(this.href, \'\', \'resizable=yes,status=yes,location=yes,toolbar=yes,menubar=yes,fullscreen=yes,scrollbars=yes,dependent=yes\'); return false;\" href=\"https://zhuanlan.zhihu.com/p/369486197\">原文链接</a><br></p>'),(24,'<h2>定义和用法</h2><p>contenteditable 属性规定是否可编辑元素的内容。</p><h2>HTML 4.01 与 HTML 5 之间的差异</h2><p>contenteditable 属性是 HTML5 中的新属性。</p><h2>语法</h2><div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">&lt;<em>element</em> contenteditable=\"<em>value</em>\"&gt;</div><h3>属性值</h3><table class=\" cke_show_border\"><tbody><tr><th>值</th><th>描述</th></tr><tr><td>true</td><td>规定可以编辑元素内容。</td></tr><tr><td>false</td><td>规定无法编辑元素内容。</td></tr><tr><td><em>classname</em></td><td>继承父元素的 contenteditable 属性。</td></tr></tbody></table>'),(29,'\"<blockquote><p>无须担心，明天早上牛奶还会放在门前的台阶上，《新政治家报》也会照常出版。<br>——George&nbsp;Orwell<br></p></blockquote><p>向外看的是梦中人，向内看的是清醒者。<br>向内看者，唯自我意识觉醒之人。<br>再绚烂的世界，也只不过是内心的一道装饰。<br>支起内心这堵墙的，是随着时间的流逝，一点一点积累起来的坚持。&nbsp;</p><div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">&nbsp;（仅代表个人观点，不喜勿喷，并无嘲笑和讽刺的意味，如果有哪里语言不当，或有言论冒犯抱歉，只是单纯的觉得，请杠精远离，另外我父母还健在，不是孤儿，受过教育，非杠非黑，并无敌意，仅表达字面含义无讽刺、暗示意味，并无意引发论战，语言不当之处请见谅，本人尊重一切，若本回复冒犯到您我诚挚表示歉意，若您不赞同我的观点不必特地回复我)<br></div>\"'),(30,'\"<blockquote><p>（仅代表个人观点，不喜勿喷，并无嘲笑和讽刺的意味，如果有哪里语言不当，或有言论冒犯抱歉，只是单纯的觉得，请杠精远离，另外我父母还健在，不是孤儿，受过教育，非杠非黑，并无敌意，仅表达字面含义无讽刺、暗示意味，并无意引发论战，语言不当之处请见谅，本人尊重一切，若本回复冒犯到您我诚挚表示歉意，若您不赞同我的观点不必特地回复我)<br><br></p></blockquote>\"'),(32,'<h2>Format in kotlin string templates</h2><p>Kotlin有一个很棒的功能叫做字符串模板。 我很喜欢。</p><table cellspacing=\"0\" cellpadding=\"0\" class=\" cke_show_border\"><tbody><tr><td><p>1<br>2</p></td><td><p>&nbsp;val i = 10<br>&nbsp;val s =\"i = $i\" // evaluates to\"i = 10\"</p></td></tr></tbody></table><p>但是模板中是否可以有任何格式？ 例如，我想在kotlin中将字符串模板中的Double格式化，至少在小数分隔符后设置一些数字：</p><table cellspacing=\"0\" cellpadding=\"0\" class=\" cke_show_border\"><tbody><tr><td><p>1<br>2</p></td><td><p>val pi = 3.14159265358979323<br>val s =\"pi = $pi??\" // How to make it\"pi = 3.14\"?</p></td></tr></tbody></table><hr><p>遗憾的是，对于字符串模板中的格式化没有内置支持，作为一种解决方法，您可以使用以下内容：</p><table cellspacing=\"0\" cellpadding=\"0\" class=\" cke_show_border\"><tbody><tr><td><p>1</p></td><td><p>\"pi = ${pi.format(2)}\"</p></td></tr></tbody></table><p>.format(n)函数，你需要将自己定义为</p><table cellspacing=\"0\" cellpadding=\"0\" class=\" cke_show_border\"><tbody><tr><td><p>1</p></td><td><p>fun Double.format(digits: Int) = java.lang.String.format(\"%.${digits}f\", this)</p></td></tr></tbody></table><p>目前Kotlin显然缺少一些功能，我们将修复它。</p>'),(33,'<table class=\" cke_show_border\"><thead><tr><th>数据库</th><th>对应Java类（旧）</th><th>对应Java类（新）</th></tr></thead><tbody><tr><td>DATETIME</td><td>java.util.Date</td><td>LocalDateTime</td></tr><tr><td>DATE</td><td>java.sql.Date</td><td>LocalDate</td></tr><tr><td>TIME</td><td>java.sql.Time</td><td>LocalTime</td></tr><tr><td>TIMESTAMP</td><td>java.sql.Timestamp</td><td>LocalDateTime</td></tr></tbody></table>'),(34,'<p>加好友<br></p>'),(37,'<h1>Kamanri</h1><p>一个个人编写并使用的基于<code>.net Core 3.1</code>的类库.可在<a data-cke-saved-href=\"https://www.nuget.org/\" href=\"https://www.nuget.org/\">nuget.org</a>上获取同名的NuGet包.<br>包括:</p><ul><li><strong>一个轻量级对象关系映射(ORM)框架 -- Kamanri.Database</strong></li><li><strong>一个事件驱动型网络套接字(WebSocket)框架 -- Kamanri.WebSockets</strong></li><li>一套对HTTP请求的封装 -- Kamanri.Http</li><li>一些工具类(如随机ID生成类，互斥锁类等等) -- Kamanri.Self</li></ul><hr><p><br></p><h2>1. Kamanri.Database</h2><p><br></p><h3>1.1 简介</h3><p>如前文所述，这是一个<strong>轻量级对象关系映射(ORM)框架</strong>.<br>众所周知，ORM框架是指能够将数据库中的表与面向对象语言中的对象互相绑定并提供一定数据库操作能力的一套解决方案.<br>本框架设计的出发点以及区别于其他的常见的ORM框架在于，它可以基于两类实体之间的关系查询(比较推荐这么做)，也可以直接基于SQL selection查询.本框架也保留使用者直接使用sql来操作数据库的能力.<br>本框架设计的核心为基于关系表中关系的查询.使用者可以在两个实体之间赋予任意形式的关系，并通过框架内置的方法来查询.<br>本框架基于<code>ASP .net Core</code>.<br>另外，本框架目前只适用于关系型数据库，并且需要项目自行提供到对应数据库的驱动包(如Mysql.Data).</p><p><br></p><h3>1.2 使用方法</h3><p><br></p><p>1.2.1 准备</p><ol><li>在<code>ASP .net Core</code>项目中的<code>Startup.cs</code>引入框架的服务:</li></ol><p>Startup.cs</p><p><br></p><pre>using XXX;\n\nnamespace XXX\n{\n	public class Startup\n	{\n		\n		public void ConfigureServices(IServiceCollection services)\n		{\n            ...\n			\n			services.AddKamanriDataBase(options =&gt;\n			{\n				options.Server = Configuration[\"SQL:Server\"];\n				options.Port = Configuration[\"SQL:Port\"];\n				options.Database = Configuration[\"SQL:Database\"];\n				options.Uid = Configuration[\"SQL:Uid\"];\n				options.Pwd = Configuration[\"SQL:Pwd\"];\n\n			}, options =&gt; new MySql.Data.MySqlClient.MySqlConnection(options));\n\n            ...\n\n		}\n	}\n}\n\n</pre><p>你可以直接将配置填写在<code>Startip.cs</code>中, 不过为了便于后续的部署与配置, 通常更建议这里采用的<strong>json配置项载入</strong>.<br>此时项目的<code>appsettings.json</code>应当配置为:</p><p><br></p><pre>{\n  ...\n\n  \"SQL\":{\n	\"Server\": ${Server IP},\n	\"Port\": ${Server Port},\n	\"Database\": ${Server Database Name},\n	\"Uid\": ${Database User Id},\n	\"Pwd\": ${Database User Password}\n  }\n  ...\n}\n</pre><ol><li>自行为对应的数据库设置实体表和关系表.<br>设现有两种实体A和B, 需要建立这两种实体的实体表和他们的关系表.<br>注意对于实体A(表名为<code>ta</code>)和实体B(表名为<code>tb</code>)的关系表,其格式严格规定为如下:</li></ol><p><br></p><pre>create table ta_tb(\n	ta bigint not null,\n    tb bigint not null,\n    relations varchar(255) not null,\n	primary key (ta, tb),\n    foreign key FK_TA (ta) references ta(ID),\n    foreign key FK_TB (tb) references tb(ID)\n);\n</pre><p>对应的实体A和实体B需要有一个名为ID的自增主键:</p><p><br></p><pre>create table ta(\n	ID bigint auto_increment primary key,\n    p1 varchar(255)\n);\ncreate table tb(\n	ID bigint auto_increment primary key,\n    p2 varchar(255)\n);\n</pre><ol><li>在项目中新建Models文件夹, 并在其下新建<code>class A</code>和<code>class B</code>作为两种实体的对象模型:</li></ol><p><br></p><pre>...\n    public class A\n	{\n		public string p1 { get; set; }\n	}\n...\n    public class B\n	{\n		public int p2 { get; set; }\n	}\n...\n</pre><ul><li>注意这里一定要把实体中的属性<strong>以属性的方式定义</strong>(能通过Type.GetProperties()获取), 否则无法识别.</li></ul><ol><li>让它们</li></ol><ul><li>继承&nbsp;<code>Kamanri.Database.Models.Entity&lt;TEntity&gt;</code>&nbsp;类.</li><li>重写<code>GetEntityFromDataReader</code>和<code>GetEntity</code>两个方法.</li></ul><blockquote><ul><li><code>GetEntityFromDataReader</code>方法用于从数据库返回的数据读取器<code>DbDataReader</code>中取出对应的实体.</li><li><code>GetEntity</code>方法用于从本实体抽象类的类实例中获取实体, 统一返回this即可.</li></ul></blockquote><ul><li>重写<code>TableName</code>属性, 赋值为对应的数据库表名.</li><li>为每个实体属性添加适当的自定义属性(如<code>ColumnName</code>为对应的数据库列名).</li></ul><p><br></p><pre>using System.Data.Common;\nusing Kamanri.Database.Models;\nusing Kamanri.Database.Models.Attributes;\n...\n    public class A : Entity&lt;A&gt;\n	{\n        [ColumnName(\"p1\")]\n		public string P1 { get; set; }\n\n        public override string TableName { get; set; } = \"t1\";\n\n        public override A GetEntity() =&gt; this;\n\n		public override A GetEntityFromDataReader(DbDataReader ddr) =&gt;\n			new A()\n			{\n				P1 = (string)ddr[\"p1\"]\n			};\n	}\n...\n    public class B : Entity&lt;B&gt;\n	{\n		[ColumnName(\"p2\")]\n		public int P2 { get; set; }\n\n        public override string TableName { get; set; } = \"t2\";\n\n        public override B GetEntity() =&gt; this;\n\n		public override B GetEntityFromDataReader(DbDataReader ddr) =&gt;\n			new B()\n			{\n				P2 = (string)ddr[\"p2\"]\n			};\n	}\n...\n</pre><ol><li>在要使用实体框架的类中通过构造函数注入<code>DatabaseContext</code>类.</li></ol><p><br></p><pre>public class Service1\n{\n    private readonly DatabaseContext _dbc;\n\n    public UserService(DatabaseContext dbc, TagService tagService)\n	{\n		_dbc = dbc;\n	}\n}\n</pre><p><br></p><p>1.2.2 简单的操作</p><p><br></p><p>简单的增删改查</p><ul><li>插入A</li></ul><p><br></p><pre>var a = new A()\n{\n    P1 = \"XXX\"\n};\n\nawait _dbc.Insert&lt;A&gt;(a);\n// 拿到数据库分配的ID以进行后续操作\nvar ID = await _dbc.SelectID&lt;A&gt;(a);\n\n// 将已经分配到ID的实体插入\nawait _dbc.InsertWithID(a);\n</pre><ul><li>删除A</li></ul><p><br></p><pre>await _dbc.Delete&lt;A&gt;(a);\n</pre><ul><li>修改A</li></ul><p><br></p><pre>a.P1 = \"XXX\";\nawait _dbc.Update&lt;A&gt;(a);\n</pre><ul><li>查询A</li></ul><p><br></p><pre>// 根据ID查询其他数据\nawait _dbc.Select&lt;A&gt;(a);\n// 根据候选码查询ID\nvar ID = await _dbc.SelectID&lt;A&gt;(a);\n// 查询所有\nvar allAList = await _dbc.SelectAll&lt;A&gt;();\n// 使用SQL查询\nvar aList = await _dbc.SelectCustom&lt;A&gt;(\"P1 = \'XXX\'\");\n</pre><p>他们也有对应的集合方法<code>Inserts</code>,<code>InsertsWithID</code>,<code>Deletes</code>,<code>Selects</code>和<code>SelectIDs</code>,此时输入对象变为了集合.</p><p><br></p><p>结合实体关系的查询</p><p>例如ta_tb表中有如下行:</p><table class=\" cke_show_border\"><tbody><tr><td>ta</td><td>tb</td><td>relations</td></tr><tr><td>1</td><td>2</td><td>{\"Type\": [\"R1\"]}</td></tr></tbody></table><p>则表示ID为1的A实体和ID为2的B实体存在<strong>键为Type, 值为R1</strong>的关系.</p><p>可以通过A与对应的关系找到B:</p><p><br></p><pre>var a = new A()\n{\n    ID = 1\n};\n\nvar bList = _dbc.MappingSelect&lt;A, B&gt;(\n    a,\n    ID_IDList.OutPutType.Value,\n    selection =&gt; selection.Type = new List&lt;string&gt;(){ \"R1\" }\n);\n</pre><p>上述语句可以将所有的<code>ta</code>列为1,&nbsp;<code>relations</code>中键为<code>Type</code>的值包括<code>R1</code>的所有tb对应的实体列出.</p><ul><li><code>ID_IDList.OutPutType.Value</code>&nbsp;表示输出实体的类型(B)在关系表中的位置(tb)为\"值\", 即第二位. 若为<code>ID_IDList.OutPutType.Key</code>则为第一位.</li></ul><p>此外还有:</p><blockquote><p>Mapping: 在数据库中匹配得到输入实体和对应的输出实体<br>MappingUnionStatistics: 查找所有关系的并集并使用字典统计每一个输出实体与输入实体的所有关系<br>MappingSelectUnionStatistics: 查找所有关系的并集并使用字典统计每一个输出实体与输入实体的所有关系,根据输入条件筛选符合条件的关系</p></blockquote><hr><p><br></p><h2>2. Kamanri.WebSockets</h2><p><br></p><h3>2.1 简介</h3><p>如前文所述，这是一个<strong>事件驱动型网络套接字(WebSocket)框架</strong>.<br>本框架基于<code>ASP .net Core</code>.<br>本框架实现树状结构的C/S拓扑，可作为客户端向一个服务端发出请求，也可以作为服务端接受多台来自客户端的请求, 一个服务程序可单独作为客户端或服务端使用，也可同时作为客户端或服务端使用.<br>本框架基于事件处理机制的思想，采用方法的表驱动方式，实现了一个类似于控制器的处理层，使得用户可以像编写控制器一样，为被路由到某个特定事件的消息编写相应的事件处理程序.<br>本框架目前已提供web端的js实现以及安卓端的kotlin实现.</p><p><br></p><h3>2.2 使用方法</h3><ol><li>添加<code>OnMessageMessage</code>自定义的事件处理类和<code>OnMessageMiddleware</code>自定义的事件处理类中间件类.</li></ol><p><br></p><pre>    public class OnMessageService\n    {\n\n    }\n\n    public class OnMessageMiddleware\n	{\n		public RequestDelegate _next;\n		//启动OnMessageService服务\n		public OnMessageService OnMessageService { get; set; }\n		public OnMessageMiddleware(RequestDelegate next, OnMessageService onMsService)\n		{\n			_next = next;\n			OnMessageService = onMsService;\n		}\n\n		public async Task Invoke(HttpContext httpContext)\n		{\n			await _next.Invoke(httpContext);\n		}\n	}\n</pre><ol><li>在<code>ASP .net Core</code>项目中的<code>Startup.cs</code>引入框架的服务:</li></ol><p>Startup.cs</p><p><br></p><pre>using XXX;\n\nnamespace XXX\n{\n	public class Startup\n	{\n		\n		public void ConfigureServices(IServiceCollection services)\n		{\n            ...\n            services.AddControllers();\n			// 添加服务\n			services.AddKamanriWebSocket().AddSingleton&lt;OnMessageService&gt;();\n\n            ...\n\n		}\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n		{\n			if (env.IsDevelopment())\n			{\n				app.UseDeveloperExceptionPage();\n			}\n\n			app.UseRouting();\n            // 添加中间件\n			app.UseKamanriWebSocket();\n\n			app.UseMiddleware&lt;OnMessageMiddleware&gt;();\n\n			app.UseEndpoints(endpoints =&gt;\n			{\n				endpoints.MapControllers();\n			});\n		}\n	}\n}\n\n</pre><ol><li>如果该项目需要作为客户端, 则在<code>appsettings.json</code>添加:</li></ol><p><br></p><pre>{\n  ...\n\n  \"WebSocket\" : {\n	\"URL\" : ${Server URL}\n  }\n\n  ...\n}\n</pre><p>否则, 忽略这一步.</p><ol><li>如果该项目要作为服务端, 则创建一个控制器作为WebSocket的注入点:</li></ol><p>IndexController.cs</p><p><br></p><pre>    public class IndexController : ControllerBase\n	{\n		IWebSocketSession _wsSession;\n\n		public IndexController(IWebSocketSession wsSession)\n		{\n			_wsSession = wsSession;\n		}\n\n		[HttpGet]\n		[Route(\"/\")]\n		public async Task Indexer()\n		{\n\n			if (HttpContext.WebSockets.IsWebSocketRequest)\n			{\n				var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync();\n				//注册WebSocket\n				await _wsSession.AcceptWebSocketInjection(webSocket);\n			}\n\n\n		}\n\n\n	}\n</pre><p>否则, 忽略这一步.</p><ol><li>在<code>OnMessageService</code>中编写事件处理程序:</li></ol><p><br></p><pre>public class OnMessageService\n{\n    private readonly IWebSocketMessageService _wsmService;\n    public OnMessageService(IWebSocketMessageService wsmService)\n    {\n        _wsmService = wsmService;\n        _wsmService.AddEventHandler(WebSocketMessageEvent.OnConnect, OnConnect)\n            .AddEventHandler(WebSocketMessageEvent.OnDisconnect, OnDisconnect);;\n        ...\n    }\n\n    public Task&lt;IList&lt;WebSocketMessage&gt;&gt; OnConnect(IWebSocketSession session, IList&lt;WebSocketMessage&gt; messages)\n    {\n        ...\n    }\n\n    public Task&lt;IList&lt;WebSocketMessage&gt;&gt; OnDisconnect(IWebSocketSession session, IList&lt;WebSocketMessage&gt; messages)\n    {\n        ...\n    }\n    ...\n}\n</pre><ul><li><code>IWebSocketMessageService.AddEventHandler</code>方法将对应的消息路由到对应的事件处理程序, 并将事件处理程序的返回值作为消息返回给发送消息方.</li><li>也可以利用<code>IWebSocketSession</code>单独发送消息.</li></ul><hr><p><br></p><h2>3. Kamanri.Http</h2><p>...</p><p><br></p><h2>4. Kamanri.Self</h2><p>...</p>'),(43,'<h2>CKEditor 5</h2><h3>CKEditor 5</h3><h4>CKEditor 5</h4><p>CKEditor 5</p><p><strong>CKEditor 5</strong></p><p><i>CKEditor 5</i></p><ol><li><i>CKEditor 5</i></li><li><i>CKEditor 5</i></li></ol><blockquote><p><i>CKEditor 5</i></p></blockquote><figure class=\"table ck-widget ck-widget_with-selection-handle\" contenteditable=\"false\"><div class=\"ck ck-widget__selection-handle\"><svg class=\"ck ck-icon\" viewBox=\"0 0 16 16\"><path d=\"M4 0v1H1v3H0V.5A.5.5 0 0 1 .5 0H4zm8 0h3.5a.5.5 0 0 1 .5.5V4h-1V1h-3V0zM4 16H.5a.5.5 0 0 1-.5-.5V12h1v3h3v1zm8 0v-1h3v-3h1v3.5a.5.5 0 0 1-.5.5H12z\"></path><path fill-opacity=\".256\" d=\"M1 1h14v14H1z\"></path><g class=\"ck-icon__selected-indicator\"><path d=\"M7 0h2v1H7V0zM0 7h1v2H0V7zm15 0h1v2h-1V7zm-8 8h2v1H7v-1z\"></path><path fill-opacity=\".254\" d=\"M1 1h14v14H1z\"></path></g></svg></div><table><tbody><tr><td class=\"ck-editor__editable ck-editor__nested-editable\" contenteditable=\"true\"><span class=\"ck-table-bogus-paragraph\">CKEditor 5</span></td><td class=\"ck-editor__editable ck-editor__nested-editable\" contenteditable=\"true\"><span class=\"ck-table-bogus-paragraph\">CKEditor 5</span></td><td class=\"ck-editor__editable ck-editor__nested-editable\" contenteditable=\"true\"><span class=\"ck-table-bogus-paragraph\">CKEditor 5</span></td></tr></tbody></table><div class=\"ck ck-reset_all ck-widget__type-around\"><div class=\"ck ck-widget__type-around__button ck-widget__type-around__button_before\" title=\"Insert paragraph before block\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 8\"><path d=\"M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038\"></path></svg></div><div class=\"ck ck-widget__type-around__button ck-widget__type-around__button_after\" title=\"Insert paragraph after block\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 8\"><path d=\"M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038\"></path></svg></div><div class=\"ck ck-widget__type-around__fake-caret\"></div></div></figure>'),(44,'<h2>The three greatest things you learn from traveling</h2><p>Like all the great things on earth traveling teaches us by example. Here are some of the most precious lessons I’ve learned over the years of traveling.</p><h3>Appreciation of diversity</h3><p>Getting used to an entirely different culture can be challenging. While it’s also nice to learn about cultures online or from books, nothing comes close to experiencing <a href=\"https://en.wikipedia.org/wiki/Cultural_diversity\">cultural diversity</a> in person. You learn to appreciate each and every single one of the differences while you become more culturally fluid.</p><figure class=\"image ck-widget\" contenteditable=\"false\"><img src=\"sample/img/umbrellas.jpg\" alt=\"Three Monks walking on ancient temple.\"><figcaption class=\"ck-editor__editable ck-editor__nested-editable\" data-placeholder=\"Enter image caption\" contenteditable=\"true\">Leaving your comfort zone might lead you to such beautiful sceneries like this one.</figcaption><div class=\"ck ck-reset_all ck-widget__type-around\"><div class=\"ck ck-widget__type-around__button ck-widget__type-around__button_before\" title=\"Insert paragraph before block\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 8\"><path d=\"M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038\"></path></svg></div><div class=\"ck ck-widget__type-around__button ck-widget__type-around__button_after\" title=\"Insert paragraph after block\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 8\"><path d=\"M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038\"></path></svg></div><div class=\"ck ck-widget__type-around__fake-caret\"></div></div></figure><h3>Confidence</h3><p>Going to a new place can be quite terrifying. While change and uncertainty makes us scared, traveling teaches us how ridiculous it is to be afraid of something before it happens. The moment you face your fear and see there was nothing to be afraid of, is the moment you discover bliss.</p>'),(47,'<figure class=\"media ck-widget ck-widget_selected\" contenteditable=\"false\"><div class=\"ck-media__wrapper\" data-oembed-url=\"https:////player.bilibili.com/player.html?aid=638213119&amp;bvid=BV12Y4y1e75b&amp;cid=574572529&amp;page=1\"><div style=\"position: relative; padding-bottom: 100%; height: 0; padding-bottom: 70%;\"><iframe src=\"https:////player.bilibili.com/player.html?aid=638213119&amp;bvid=BV12Y4y1e75b&amp;cid=574572529&amp;page=1\" style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe></div></div><div class=\"ck ck-reset_all ck-widget__type-around\"><div class=\"ck ck-widget__type-around__button ck-widget__type-around__button_before\" title=\"Insert paragraph before block\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 8\"><path d=\"M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038\"></path></svg></div><div class=\"ck ck-widget__type-around__button ck-widget__type-around__button_after\" title=\"Insert paragraph after block\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 8\"><path d=\"M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038\"></path></svg></div><div class=\"ck ck-widget__type-around__fake-caret\"></div></div></figure><div class=\"ck-fake-selection-container\" style=\"position: fixed; top: 0px; left: -9999px; width: 42px;\">media widget</div>'),(48,'<figure class=\"media ck-widget ck-widget_selected\" contenteditable=\"false\"><div class=\"ck-media__wrapper\" data-oembed-url=\"https:////player.bilibili.com/player.html?aid=683200001&amp;bvid=BV1yS4y1w7V1&amp;cid=574154831&amp;page=1\"><div style=\"position: relative; padding-bottom: 100%; height: 0; padding-bottom: 70%;\"><iframe src=\"//player.bilibili.com/player.html?aid=683200001&amp;bvid=BV1yS4y1w7V1&amp;cid=574154831&amp;page=1\" style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe></div></div><div class=\"ck ck-reset_all ck-widget__type-around\"><div class=\"ck ck-widget__type-around__button ck-widget__type-around__button_before\" title=\"Insert paragraph before block\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 8\"><path d=\"M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038\"></path></svg></div><div class=\"ck ck-widget__type-around__button ck-widget__type-around__button_after\" title=\"Insert paragraph after block\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 8\"><path d=\"M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038\"></path></svg></div><div class=\"ck ck-widget__type-around__fake-caret\"></div></div></figure><p><br data-cke-filler=\"true\"></p><div class=\"ck-fake-selection-container\" style=\"position: fixed; top: 0px; left: -9999px; width: 42px;\">media widget</div>');
/*!40000 ALTER TABLE `postsinfo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tags` (
  `ID` bigint NOT NULL AUTO_INCREMENT,
  `tag` char(10) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `tagID` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=60 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (-1,'默认标签'),(1,'第一个标签'),(2,'就业'),(3,'考研'),(4,'哲学'),(5,'计算机科学技术'),(6,'网络工程'),(7,'软件工程'),(8,'计算机'),(9,'电路原理'),(10,'模拟电子技术'),(11,'人工智能'),(12,'网络管理与维护'),(13,'汇编语言'),(14,'路由与交换技术'),(15,'需求分析与系统设计'),(16,'数据库'),(17,'程序设计语言'),(18,'电路原理图'),(19,'动态电路'),(20,'三极管'),(21,'半导体'),(22,'场效应'),(23,'大数据'),(24,'深度学习'),(25,'VLAN间路由'),(26,'生成树协议'),(27,'端口聚合'),(28,'存储器系统'),(29,'中断系统'),(30,'需求文档'),(31,'数据流图'),(32,'用例图'),(33,'SQL server'),(34,'Oracle'),(35,'Java'),(36,'C++'),(37,'Python'),(38,'Linux命令'),(39,'线性代数'),(40,'概率论'),(41,'用例'),(42,'参与者'),(43,'E-R图'),(44,'SQL语句'),(45,'数据库设计'),(47,'C#'),(48,'.NET Core'),(49,'考研数学'),(50,'考研英语'),(51,'考研政治'),(52,'考研专业课'),(53,'高等数学'),(54,'线性代数'),(55,'概率论'),(56,'数据结构'),(57,'计算机组成原理'),(58,'操作系统'),(59,'计算机网络');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags_tags`
--

DROP TABLE IF EXISTS `tags_tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tags_tags` (
  `tags_1` bigint NOT NULL,
  `tags_2` bigint NOT NULL,
  `relations` varchar(255) NOT NULL,
  PRIMARY KEY (`tags_1`,`tags_2`),
  KEY `FK_TAGS_2` (`tags_2`),
  CONSTRAINT `FK_TAGS_1` FOREIGN KEY (`tags_1`) REFERENCES `tags` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_TAGS_2` FOREIGN KEY (`tags_2`) REFERENCES `tags` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags_tags`
--

LOCK TABLES `tags_tags` WRITE;
/*!40000 ALTER TABLE `tags_tags` DISABLE KEYS */;
INSERT INTO `tags_tags` VALUES (1,-1,'{}'),(2,-1,'{}'),(3,-1,'{}'),(4,-1,'{}'),(5,8,'{}'),(6,8,'{}'),(7,8,'{}'),(8,2,'{}'),(9,5,'{}'),(10,5,'{}'),(11,5,'{}'),(12,6,'{}'),(13,5,'{}'),(14,6,'{}'),(15,7,'{}'),(16,7,'{}'),(17,7,'{}'),(18,9,'{}'),(19,9,'{}'),(20,10,'{}'),(21,10,'{}'),(22,10,'{}'),(23,11,'{}'),(24,11,'{}'),(25,12,'{}'),(26,12,'{}'),(27,12,'{}'),(28,13,'{}'),(29,13,'{}'),(30,15,'{}'),(31,15,'{}'),(32,15,'{}'),(33,16,'{}'),(34,16,'{}'),(35,17,'{}'),(36,17,'{}'),(37,17,'{}'),(38,23,'{}'),(39,24,'{}'),(40,24,'{}'),(41,32,'{}'),(42,32,'{}'),(43,45,'{}'),(44,16,'{}'),(45,16,'{}'),(47,17,'{}'),(48,47,'{}'),(49,3,'{}'),(50,3,'{}'),(51,3,'{}'),(52,3,'{}'),(53,49,'{}'),(54,49,'{}'),(55,49,'{}'),(56,52,'{}'),(57,52,'{}'),(58,52,'{}'),(59,52,'{}');
/*!40000 ALTER TABLE `tags_tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `ID` bigint NOT NULL AUTO_INCREMENT,
  `Password` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `Account` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `userID` (`ID`),
  UNIQUE KEY `Account_Unique` (`Account`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (3,'456789','2168359585@qq.com'),(4,'262425','2624250238@qq.com'),(5,'123456789','853909407@qq.com'),(8,'123456','974481066@qq.com'),(9,'123456','1014958042@qq.com'),(14,'654321','qq.974481066.qq@gmail.com'),(15,'123456','2240090802@qq.com');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users_comments`
--

DROP TABLE IF EXISTS `users_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users_comments` (
  `users` bigint NOT NULL,
  `comments` bigint NOT NULL,
  `relations` varchar(255) NOT NULL,
  PRIMARY KEY (`users`,`comments`),
  KEY `FK_COMMENTS` (`comments`),
  CONSTRAINT `FK_COMMENTS` FOREIGN KEY (`comments`) REFERENCES `comments` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_USERS` FOREIGN KEY (`users`) REFERENCES `users` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users_comments`
--

LOCK TABLES `users_comments` WRITE;
/*!40000 ALTER TABLE `users_comments` DISABLE KEYS */;
INSERT INTO `users_comments` VALUES (3,77,'{\"Type\":[\"Owned\"]}'),(3,78,'{\"Type\":[\"Owned\"]}'),(3,98,'{\"Type\":[\"Owned\",\"Like\"]}'),(3,99,'{\"Type\":[\"Owned\"]}'),(4,97,'{\"Type\":[\"Owned\"]}'),(8,62,'{\"Type\":[\"Owned\"]}'),(8,75,'{\"Type\":[\"Owned\",\"Like\"]}'),(8,76,'{\"Type\":[\"Owned\"]}'),(8,79,'{\"Type\":[\"Owned\"]}'),(8,80,'{\"Type\":[\"Owned\"]}'),(8,81,'{\"Type\":[\"Owned\"]}'),(8,85,'{\"Type\":[\"Owned\"]}'),(8,86,'{\"Type\":[\"Owned\"]}'),(8,88,'{\"Type\":[\"Owned\"]}'),(8,89,'{\"Type\":[\"Owned\"]}'),(8,90,'{\"Type\":[\"Owned\"]}'),(8,91,'{\"Type\":[\"Owned\"]}'),(8,92,'{\"Type\":[\"Owned\"]}'),(8,93,'{\"Type\":[\"Owned\"]}'),(8,94,'{\"Type\":[\"Owned\"]}'),(8,95,'{\"Type\":[\"Owned\"]}'),(8,96,'{\"Type\":[\"Owned\"]}');
/*!40000 ALTER TABLE `users_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users_posts`
--

DROP TABLE IF EXISTS `users_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users_posts` (
  `users` bigint NOT NULL,
  `posts` bigint NOT NULL,
  `relations` varchar(255) NOT NULL,
  PRIMARY KEY (`users`,`posts`),
  KEY `UP_FK_P` (`posts`),
  KEY `UP_FK_U` (`users`),
  CONSTRAINT `users_posts_ibfk_1` FOREIGN KEY (`posts`) REFERENCES `posts` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `users_posts_ibfk_2` FOREIGN KEY (`users`) REFERENCES `users` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users_posts`
--

LOCK TABLES `users_posts` WRITE;
/*!40000 ALTER TABLE `users_posts` DISABLE KEYS */;
INSERT INTO `users_posts` VALUES (3,6,'{\"Type\":[\"Like\",\"Collect\"]}'),(3,23,'{\"Type\":[\"Owned\"]}'),(3,24,'{\"Type\":[\"Owned\"]}'),(3,29,'{\"Type\":[\"Owned\",\"Like\"]}'),(3,30,'{\"Type\":[\"Owned\"]}'),(3,33,'{\"Type\":[\"Owned\",\"Like\"]}'),(3,43,'{\"Type\":[\"Like\"]}'),(3,47,'{\"Type\":[\"Like\",\"Collect\"]}'),(3,48,'{\"Type\":[\"Like\",\"Collect\"]}'),(4,6,'{\"Type\":[\"Like\",\"Collect\"]}'),(4,34,'{\"Type\":[\"Owned\",\"Like\"]}'),(4,37,'{\"Type\":[\"Like\"]}'),(5,32,'{\"Type\":[\"Owned\"]}'),(8,6,'{\"Type\":[\"Owned\"]}'),(8,17,'{\"Type\":[\"Owned\"]}'),(8,24,'{\"Type\":[\"Like\",\"Collect\"]}'),(8,29,'{\"Type\":[\"Like\"]}'),(8,37,'{\"Type\":[\"Owned\",\"Like\",\"Collect\"]}'),(8,43,'{\"Type\":[\"Owned\"]}'),(8,44,'{\"Type\":[\"Owned\"]}'),(8,47,'{\"Type\":[\"Owned\"]}'),(8,48,'{\"Type\":[\"Owned\",\"Like\"]}'),(9,24,'{\"Type\":[\"Like\"]}'),(9,32,'{\"Type\":[\"Like\"]}'),(9,37,'{\"Type\":[\"Like\"]}'),(9,48,'{\"Type\":[\"Like\"]}'),(14,6,'{\"Type\":[\"Like\"]}'),(14,29,'{\"Type\":[\"Like\",\"Collect\"]}'),(14,30,'{\"Type\":[\"Like\",\"Collect\"]}'),(14,32,'{\"Type\":[\"Like\",\"Collect\"]}');
/*!40000 ALTER TABLE `users_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users_tags`
--

DROP TABLE IF EXISTS `users_tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users_tags` (
  `users` bigint NOT NULL,
  `tags` bigint NOT NULL,
  `relations` varchar(255) NOT NULL,
  PRIMARY KEY (`users`,`tags`),
  KEY `UT_FK_T` (`tags`),
  KEY `UT_FK_U` (`users`),
  CONSTRAINT `users_tags_ibfk_1` FOREIGN KEY (`tags`) REFERENCES `tags` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `users_tags_ibfk_2` FOREIGN KEY (`users`) REFERENCES `users` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users_tags`
--

LOCK TABLES `users_tags` WRITE;
/*!40000 ALTER TABLE `users_tags` DISABLE KEYS */;
INSERT INTO `users_tags` VALUES (3,4,'{\"Type\":[\"Self\"]}'),(3,9,'{\"Type\":[\"Self\"]}'),(3,11,'{\"Type\":[\"Self\"]}'),(3,24,'{\"Type\":[\"Interested\"]}'),(3,52,'{\"Type\":[\"Interested\"]}'),(3,57,'{\"Type\":[\"Interested\"]}'),(3,58,'{\"Type\":[\"Interested\"]}'),(4,7,'{\"Type\":[\"Self\"]}'),(4,16,'{\"Type\":[\"Self\"]}'),(4,35,'{\"Type\":[\"Self\"]}'),(4,45,'{\"Type\":[\"Interested\"]}'),(5,1,'{\"Type\":[\"Self\"]}'),(5,3,'{\"Type\":[\"Interested\"]}'),(5,5,'{\"Type\":[\"Interested\"]}'),(5,7,'{\"Type\":[\"Self\"]}'),(8,2,'{\"Type\":[\"Self\"]}'),(8,3,'{\"Type\":[\"Self\"]}'),(8,5,'{\"Type\":[\"Self\"]}'),(8,7,'{\"Type\":[\"Interested\",\"Self\"]}'),(8,49,'{\"Type\":[\"Interested\"]}'),(9,3,'{\"Type\":[\"Interested\"]}'),(9,9,'{\"Type\":[\"Self\"]}'),(9,10,'{\"Type\":[\"Self\"]}'),(9,13,'{\"Type\":[\"Self\"]}'),(14,4,'{\"Type\":[\"Self\"]}'),(14,12,'{\"Type\":[\"Interested\"]}'),(14,14,'{\"Type\":[\"Interested\"]}'),(15,5,'{\"Type\":[\"Self\"]}'),(15,7,'{\"Type\":[\"Interested\"]}'),(15,11,'{\"Type\":[\"Interested\"]}');
/*!40000 ALTER TABLE `users_tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users_users`
--

DROP TABLE IF EXISTS `users_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users_users` (
  `users_1` bigint NOT NULL,
  `users_2` bigint NOT NULL,
  `relations` varchar(255) NOT NULL,
  PRIMARY KEY (`users_1`,`users_2`),
  KEY `users_2` (`users_2`),
  CONSTRAINT `users_users_ibfk_1` FOREIGN KEY (`users_1`) REFERENCES `users` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `users_users_ibfk_2` FOREIGN KEY (`users_2`) REFERENCES `users` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users_users`
--

LOCK TABLES `users_users` WRITE;
/*!40000 ALTER TABLE `users_users` DISABLE KEYS */;
INSERT INTO `users_users` VALUES (3,3,'{\"Type\":[\"Focus\"]}'),(3,5,'{\"Type\":[\"Focus\"]}'),(3,8,'{\"Type\":[\"Focus\"]}'),(3,15,'{\"Type\":[\"Focus\"]}'),(4,3,'{\"Type\":[\"Focus\"]}'),(4,4,'{\"Type\":[\"Focus\"]}'),(4,8,'{\"Type\":[\"Focus\"]}'),(5,3,'{\"Type\":[\"Focus\"]}'),(5,4,'{\"Type\":[\"Focus\"]}'),(5,5,'{\"Type\":[\"Focus\"]}'),(5,8,'{\"Type\":[\"Focus\"]}'),(8,3,'{\"Type\":[\"Focus\"]}'),(8,4,'{\"Type\":[\"Focus\"]}'),(8,5,'{\"Type\":[\"Focus\"]}'),(8,8,'{\"Type\":[\"Focus\"]}'),(8,9,'{\"Type\":[\"Focus\"]}'),(8,15,'{\"Type\":[\"Focus\"]}'),(9,3,'{\"Type\":[\"Focus\"]}'),(9,4,'{\"Type\":[\"Focus\"]}'),(9,5,'{\"Type\":[\"Focus\"]}'),(9,8,'{\"Type\":[\"Focus\"]}'),(14,8,'{\"Type\":[\"Focus\"]}'),(15,3,'{\"Type\":[\"Focus\"]}'),(15,4,'{\"Type\":[\"Focus\"]}'),(15,5,'{\"Type\":[\"Focus\"]}'),(15,8,'{\"Type\":[\"Focus\"]}');
/*!40000 ALTER TABLE `users_users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `usersinfo`
--

DROP TABLE IF EXISTS `usersinfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `usersinfo` (
  `ID` bigint NOT NULL,
  `NickName` varchar(255) NOT NULL,
  `RealName` varchar(255) NOT NULL,
  `University` varchar(255) NOT NULL,
  `School` varchar(255) NOT NULL,
  `Speciality` varchar(255) NOT NULL,
  `SchoolYear` varchar(255) NOT NULL,
  `Introduction` varchar(4095) NOT NULL,
  `HeadImage` varchar(1023) NOT NULL,
  KEY `ID` (`ID`),
  CONSTRAINT `usersinfo_ibfk_1` FOREIGN KEY (`ID`) REFERENCES `users` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `usersinfo`
--

LOCK TABLES `usersinfo` WRITE;
/*!40000 ALTER TABLE `usersinfo` DISABLE KEYS */;
INSERT INTO `usersinfo` VALUES (8,'kamanri','hwl','四川师范大学','计算机科学学院','计算机科学与技术','2019/1/1 0:00:00','暂时没有想好','/StaticFiles/Images/HeadImage/20210714185547.jpg'),(9,'带感','cxl','四川师范大学','计算机科学学院','计算机科学与技术','2019/1/1 0:00:00','喝奶茶','/StaticFiles/Images/HeadImage/syt5.com.1638601045.jpg'),(3,'兄贵','兄贵','Sichuan Normal University','Computer Science Academy','Computer Science & Technology','2019/1/1 0:00:00','Clone','/StaticFiles/Images/HeadImage/syt5.com.1638601084.jpg'),(4,'了无痕','fmy','Sichuan Normal University','Computer Science Academy','Computer Science & Technology','2019/1/1 0:00:00','','/StaticFiles/Images/HeadImage/syt5.com.1638601120.jpg'),(5,'853909407','853909407','Sichuan Normal University','Computer Science Academy','Computer Science & Technology','2019/1/1 0:00:00','','/StaticFiles/Images/HeadImage/syt5.com.1638601145.jpg'),(14,'Ⅴali','hewanli','四川师范大学','计算机科学学院','计算机科学与技术','2019/1/1 0:00:00','牛逼','/StaticFiles/Images/HeadImage/syt5.com.1638601165.jpg'),(15,'Lucas','ly','Sichuan Normal University','Computer Science Academy','Computer Science & Technology','2019/1/1 0:00:00','','/StaticFiles/Images/HeadImage/21E71DB5133C5A2C5257FFA8FDC510BB.jpg');
/*!40000 ALTER TABLE `usersinfo` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-04-28 13:46:01
